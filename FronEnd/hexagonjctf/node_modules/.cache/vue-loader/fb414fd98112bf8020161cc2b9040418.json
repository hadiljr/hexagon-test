{"remainingRequest":"C:\\Users\\Hadil\\Desktop\\HexagonTest\\FrontEnd\\hexagonjctf\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Hadil\\Desktop\\HexagonTest\\FrontEnd\\hexagonjctf\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Hadil\\Desktop\\HexagonTest\\FrontEnd\\hexagonjctf\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Hadil\\Desktop\\HexagonTest\\FrontEnd\\hexagonjctf\\src\\components\\vehicle_form\\VehicleForm.vue?vue&type=template&id=0d0c65e8&","dependencies":[{"path":"C:\\Users\\Hadil\\Desktop\\HexagonTest\\FrontEnd\\hexagonjctf\\src\\components\\vehicle_form\\VehicleForm.vue","mtime":1613403870958},{"path":"C:\\Users\\Hadil\\Desktop\\HexagonTest\\FrontEnd\\hexagonjctf\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Hadil\\Desktop\\HexagonTest\\FrontEnd\\hexagonjctf\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Hadil\\Desktop\\HexagonTest\\FrontEnd\\hexagonjctf\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Hadil\\Desktop\\HexagonTest\\FrontEnd\\hexagonjctf\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}